from jinja2 import Environment, PackageLoader
import json, sys

class Cable(object):
    def __init__(self, net_id, src_host, src_iface, dest_host, dest_iface):
        self.net_id = net_id
        self.src_host = src_host
        self.src_iface = src_iface
        self.dest_host = dest_host
        self.dest_iface = dest_iface

class Device(object):
    def __init__(self, hostname, category, mgmt_ip, mac_map, eth_map, vagrant=False):
        self.hostname = hostname
        self.category = category
        self.mac_map = mac_map
        self.eth_map = eth_map
        self.mgmt_ip = mgmt_ip
        self.vagrant = vagrant
        self.cabling = {}

if __name__ == "__main__":
    data = json.loads(open(sys.arvg[1]).read())
    devices = []
    cabling = []

    for net_id, cable in enumerate(data['cabling']):
        cabling.append(Cable(net_id
                             device['src_host'],
                             device['src_iface'],
                             device['dest_host'],
                             device['dest_iface']))
    for device in data['devices']:
        d = Device(device['hostname'],
                   device['category'],
                   device['mgmt_ip'],
                   device['mac_map'],
                   device['eth_map'],
                   device.get('vagrant', None)))
        for cable in cabling:
            if d.hostname == cable.src_host:
                d.cabling[cable.src_iface] = cable
            elif d.hostname == cable.dest_host:
                d.cabling[cable.dest_iface] = cable
        devices.append(d)

    # create remap files
    for device in devices:
        outfile = open('./helper_scripts/autogenerated/%s_remap_eth'%device.hostname, 'w')
        outtext = 'MAP="\n'
        n = 1

        if device.vagrant:
            outtext += 'eth0=%s\n'%device.vagrant
        else:
            outtext += 'eth0=vagrant\n'

        for iface in device.eth_map:
            outtext += 'eth%d=%s\n'%(n, iface)
        outtext += '"\n'
        outfile.write(outtext)
        outfile.close()

    env = Environment(loader=PackageLoader('yourapplication', 'templates'))
    template = env.get_template('Vagrantfile.j2')
    print(template.render(devices=devices))
